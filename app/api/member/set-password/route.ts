// api/member/set-password/route.ts
import { NextResponse } from "next/server";
import pool from "@/lib/db";
import bcrypt from "bcrypt";

export async function POST(req: Request) {
  console.log("üü¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà API /api/member/set-password");

  try {
    const { id, newPassword } = await req.json();
    console.log("üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID:", id);

    if (!id || !newPassword) {
      return NextResponse.json(
        { success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" },
        { status: 400 }
      );
    }

    // Hash password ‡πÉ‡∏´‡∏°‡πà
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

    const client = await pool.connect();
    
    const result = await client.query(
      "UPDATE tb_member SET password = $1, firstpass = false WHERE id = $2 AND role IN ('cio', 'admin') RETURNING id, name, role",
      [hashedPassword, id]
    );
    
    client.release();

    if (result.rows.length === 0) {
      return NextResponse.json(
        { success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå" },
        { status: 404 }
      );
    }

    console.log("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result.rows[0].name);
    
    return NextResponse.json({
      success: true,
      message: "‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: result.rows[0]
    });

  } catch (error) {
    console.error("üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    return NextResponse.json(
      { success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" },
      { status: 500 }
    );
  }
}